"segment",
x = time_peak, xend = time_peak_plot,
y = 0.5, yend = 0.5,
color = "green",
arrow = arrow(ends = "both", length = unit(0.2, "cm"))
)
#The third plot: delta phi over delta freq
df = data.frame(x = delta_f[1:f_idx], y = phase_diff )
p_phase = ggplot(df, aes(x, y)) +
geom_line(color = "green") +
theme_minimal() +
labs(x = expression(Delta*"f [Hz]"), y = expression(Delta*phi~"["*pi*"]"))+
xlim(delta_f[1],delta_f_max)+
ylim(2*delta_f_min*T_grad, 2*delta_f_max*T_grad)
#The forth plot: Amplitude over delta freq
amp_freq[f_idx] = signal[t_grad_ind]
df = data.frame(x = delta_f[1:f_idx], y = amp_freq )
p_amp = ggplot(df, aes(x, y)) +
geom_line() +
theme_minimal() +
labs(x = expression(Delta*"f [Hz]"), y = "Amplitude")+
xlim(delta_f[1],delta_f_max)+
ylim(-1, 1)
grid_plot = wrap_plots(p_freq,p_signal,p_phase,p_amp, ncol = 2, nrow = 2)  # auto-adjusts layout
plots[[f_idx]] = grid_plot
}
filename = "test.gif"
path_out = file.path(path_figures, filename)
create_gif_from_plots(plots, path_out, 800, 600, 100, fps = 2)
for (f_idx in 1:10) {
# Integrate to get the instantaneous phase
phase = 2*cumsum(freq_xt[f_idx,] * dt)
# The difference while gradient turned on
phase_diff[f_idx] = 2*(freq_x[f_idx]-freq_0)*T_grad
time_diff = time_max/(n_turns*2)*phase_diff[f_idx]
#time_diff = period/(2)*phase_diff[f_idx]
if (delta_f[f_idx]<0) {
time_peak_plot = time_peak_base_1
time_peak = time_peak_base_1-time_diff
} else
{
time_peak = time_peak_base-time_diff
time_peak_plot = time_peak_base
}
# Signal
signal = cos(pi*phase)
#The first plot: frequency over time
df = data.frame(x = time, y = freq_xt[f_idx,]-freq_0)
p_freq = ggplot(df, aes(x, y)) +
geom_line() +
theme_minimal() +
labs(x = "Time [s]", y = expression(Delta*"f [Hz]"))+
geom_vline(xintercept = T_grad,color = "red",linetype = "dashed" )+
ylim(-delta_f_max, delta_f_max)
#The second plot: signal over time
df = data.frame(x = time, y = signal)
p_signal2 = p_signal +
geom_line(data = df, aes(x, y), color = "pink") +
geom_vline(xintercept = time_peak,color = "pink",linetype = "dashed")+
geom_vline(xintercept = time_peak_plot,color = "grey",linetype = "dashed" )+
annotate(
"segment",
x = time_peak, xend = time_peak_plot,
y = 0.5, yend = 0.5,
color = "green",
arrow = arrow(ends = "both", length = unit(0.2, "cm"))
)
#The third plot: delta phi over delta freq
df = data.frame(x = delta_f[1:f_idx], y = phase_diff )
p_phase = ggplot(df, aes(x, y)) +
geom_line(color = "green") +
theme_minimal() +
labs(x = expression(Delta*"f [Hz]"), y = expression(Delta*phi~"["*pi*"]"))+
xlim(delta_f[1],delta_f_max)+
ylim(2*delta_f_min*T_grad, 2*delta_f_max*T_grad)
#The forth plot: Amplitude over delta freq
amp_freq[f_idx] = signal[t_grad_ind]
df = data.frame(x = delta_f[1:f_idx], y = amp_freq )
p_amp = ggplot(df, aes(x, y)) +
geom_line() +
theme_minimal() +
labs(x = expression(Delta*"f [Hz]"), y = "Amplitude")+
xlim(delta_f[1],delta_f_max)+
ylim(-1, 1)
grid_plot = wrap_plots(p_freq,p_phase,p_signal,p_amp, ncol = 2, nrow = 2)  # auto-adjusts layout
plots[[f_idx]] = grid_plot
}
phase_diff = numeric(0)
amp_freq = numeric(0)
plots = list()
#for (f_idx in 1:length(delta_f)) {
for (f_idx in 1:10) {
# Integrate to get the instantaneous phase
phase = 2*cumsum(freq_xt[f_idx,] * dt)
# The difference while gradient turned on
phase_diff[f_idx] = 2*(freq_x[f_idx]-freq_0)*T_grad
time_diff = time_max/(n_turns*2)*phase_diff[f_idx]
#time_diff = period/(2)*phase_diff[f_idx]
if (delta_f[f_idx]<0) {
time_peak_plot = time_peak_base_1
time_peak = time_peak_base_1-time_diff
} else
{
time_peak = time_peak_base-time_diff
time_peak_plot = time_peak_base
}
# Signal
signal = cos(pi*phase)
#The first plot: frequency over time
df = data.frame(x = time, y = freq_xt[f_idx,]-freq_0)
p_freq = ggplot(df, aes(x, y)) +
geom_line() +
theme_minimal() +
labs(x = "Time [s]", y = expression(Delta*"f [Hz]"))+
geom_vline(xintercept = T_grad,color = "red",linetype = "dashed" )+
ylim(-delta_f_max, delta_f_max)
#The second plot: signal over time
df = data.frame(x = time, y = signal)
p_signal2 = p_signal +
geom_line(data = df, aes(x, y), color = "pink") +
geom_vline(xintercept = time_peak,color = "pink",linetype = "dashed")+
geom_vline(xintercept = time_peak_plot,color = "grey",linetype = "dashed" )+
annotate(
"segment",
x = time_peak, xend = time_peak_plot,
y = 0.5, yend = 0.5,
color = "green",
arrow = arrow(ends = "both", length = unit(0.2, "cm"))
)
#The third plot: delta phi over delta freq
df = data.frame(x = delta_f[1:f_idx], y = phase_diff )
p_phase = ggplot(df, aes(x, y)) +
geom_line(color = "green") +
theme_minimal() +
labs(x = expression(Delta*"f [Hz]"), y = expression(Delta*phi~"["*pi*"]"))+
xlim(delta_f[1],delta_f_max)+
ylim(2*delta_f_min*T_grad, 2*delta_f_max*T_grad)
#The forth plot: Amplitude over delta freq
amp_freq[f_idx] = signal[t_grad_ind]
df = data.frame(x = delta_f[1:f_idx], y = amp_freq )
p_amp = ggplot(df, aes(x, y)) +
geom_line() +
theme_minimal() +
labs(x = expression(Delta*"f [Hz]"), y = "Amplitude")+
xlim(delta_f[1],delta_f_max)+
ylim(-1, 1)
grid_plot = wrap_plots(p_freq,p_phase,p_signal,p_amp, ncol = 2, nrow = 2)  # auto-adjusts layout
plots[[f_idx]] = grid_plot
}
filename = "test.gif"
path_out = file.path(path_figures, filename)
create_gif_from_plots(plots, path_out, 800, 600, 100, fps = 2)
phase_diff = numeric(0)
amp_freq = numeric(0)
plots = list()
#for (f_idx in 1:length(delta_f)) {
for (f_idx in 1:10) {
# Integrate to get the instantaneous phase
phase = 2*cumsum(freq_xt[f_idx,] * dt)
# The difference while gradient turned on
phase_diff[f_idx] = 2*(freq_x[f_idx]-freq_0)*T_grad
time_diff = time_max/(n_turns*2)*phase_diff[f_idx]
#time_diff = period/(2)*phase_diff[f_idx]
if (delta_f[f_idx]<0) {
time_peak_plot = time_peak_base_1
time_peak = time_peak_base_1-time_diff
} else
{
time_peak = time_peak_base-time_diff
time_peak_plot = time_peak_base
}
# Signal
signal = cos(pi*phase)
#The first plot: frequency over time
df = data.frame(x = time, y = freq_xt[f_idx,]-freq_0)
p_freq = ggplot(df, aes(x, y)) +
geom_line() +
theme_minimal() +
labs(x = "Time [s]", y = expression(Delta*"f [Hz]"))+
geom_vline(xintercept = T_grad,color = "red",linetype = "dashed" )+
ylim(-delta_f_max, delta_f_max)
#The second plot: signal over time
df = data.frame(x = time, y = signal)
p_signal2 = p_signal +
geom_line(data = df, aes(x, y), color = "pink") +
geom_vline(xintercept = time_peak,color = "pink",linetype = "dashed")+
geom_vline(xintercept = time_peak_plot,color = "grey",linetype = "dashed" )+
annotate(
"segment",
x = time_peak, xend = time_peak_plot,
y = 0.5, yend = 0.5,
color = "green",
arrow = arrow(ends = "both", length = unit(0.2, "cm"))
)
#The third plot: delta phi over delta freq
df = data.frame(x = delta_f[1:f_idx], y = phase_diff )
p_phase = ggplot(df, aes(x, y)) +
geom_line(color = "green") +
theme_minimal() +
labs(x = expression(Delta*"f [Hz]"), y = expression(Delta*phi~"["*pi*"]"))+
xlim(delta_f[1],delta_f_max)+
ylim(2*delta_f_min*T_grad, 2*delta_f_max*T_grad)
#The forth plot: Amplitude over delta freq
amp_freq[f_idx] = signal[t_grad_ind]
df = data.frame(x = delta_f[1:f_idx], y = amp_freq )
p_amp = ggplot(df, aes(x, y)) +
geom_line() +
theme_minimal() +
labs(x = expression(Delta*"f [Hz]"), y = "Amplitude")+
xlim(delta_f[1],delta_f_max)+
ylim(-1, 1)
grid_plot = wrap_plots(p_freq,p_phase,p_signal2,p_amp, ncol = 2, nrow = 2)  # auto-adjusts layout
plots[[f_idx]] = grid_plot
}
filename = "test.gif"
path_out = file.path(path_figures, filename)
create_gif_from_plots(plots, path_out, 800, 600, 100, fps = 2)
# gradient
delta_f_min = -freq_0
delta_f_max = freq_0
delta_f = seq(delta_f_min,delta_f_max,length.out = n_samples_total)
delta_f = seq(delta_f_min,delta_f_max,length.out = n_samples_total)
freq_x = freq_0 + delta_f
# We turn off the gradient after some time (e.g. 1 period)
T_grad = (1/freq_0)
freq_xt = matrix(rep(freq_x, times = n_samples_total), nrow = length(freq_x))
freq_xt[, time > T_grad] = freq_0
signals = array(0, dim = n_samples)
phase = array(0, dim =n_samples)
dt = time_max/(n_samples_total-1)
time_peak_base = 2*period
time_peak_base_1 = period
signal_base = cos(2*pi*freq_0*time)
df = data.frame(x=time,y=signal_base)
p_signal = ggplot(df, aes(x, y)) +
geom_line() +
theme_minimal() +
labs(x = "Time [s]", y = "Amplitude")+
geom_vline(xintercept = T_grad,color = "red",linetype = "dashed" )+
ylim(-1, 1)
t_grad_ind = which.min(abs(time - T_grad))
phase_diff = numeric(0)
amp_freq = numeric(0)
plots = list()
#for (f_idx in 1:length(delta_f)) {
for (f_idx in 1:10) {
# Integrate to get the instantaneous phase
phase = 2*cumsum(freq_xt[f_idx,] * dt)
# The difference while gradient turned on
phase_diff[f_idx] = 2*(freq_x[f_idx]-freq_0)*T_grad
time_diff = time_max/(n_turns*2)*phase_diff[f_idx]
#time_diff = period/(2)*phase_diff[f_idx]
if (delta_f[f_idx]<0) {
time_peak_plot = time_peak_base_1
time_peak = time_peak_base_1-time_diff
} else
{
time_peak = time_peak_base-time_diff
time_peak_plot = time_peak_base
}
# Signal
signal = cos(pi*phase)
#The first plot: frequency over time
df = data.frame(x = time, y = freq_xt[f_idx,]-freq_0)
p_freq = ggplot(df, aes(x, y)) +
geom_line() +
theme_minimal() +
labs(x = "Time [s]", y = expression(Delta*"f [Hz]"))+
geom_vline(xintercept = T_grad,color = "red",linetype = "dashed" )+
ylim(-delta_f_max, delta_f_max)
#The second plot: signal over time
df = data.frame(x = time, y = signal)
p_signal2 = p_signal +
geom_line(data = df, aes(x, y), color = "pink") +
geom_vline(xintercept = time_peak,color = "pink",linetype = "dashed")+
#geom_vline(xintercept = time_peak_plot,color = "grey",linetype = "dashed" )+
annotate(
"segment",
x = time_peak, xend = time_peak_plot,
y = 0.5, yend = 0.5,
color = "green",
arrow = arrow(ends = "both", length = unit(0.2, "cm"))
)
#The third plot: delta phi over delta freq
df = data.frame(x = delta_f[1:f_idx], y = phase_diff )
p_phase = ggplot(df, aes(x, y)) +
geom_line(color = "green") +
theme_minimal() +
labs(x = expression(Delta*"f [Hz]"), y = expression(Delta*phi~"["*pi*"]"))+
xlim(delta_f[1],delta_f_max)+
ylim(2*delta_f_min*T_grad, 2*delta_f_max*T_grad)
#The forth plot: Amplitude over delta freq
amp_freq[f_idx] = signal[t_grad_ind]
df = data.frame(x = delta_f[1:f_idx], y = amp_freq )
p_amp = ggplot(df, aes(x, y)) +
geom_line() +
theme_minimal() +
labs(x = expression(Delta*"f [Hz]"), y = "Amplitude at time = T")+
xlim(delta_f[1],delta_f_max)+
ylim(-1, 1)
grid_plot = wrap_plots(p_freq,p_phase,p_signal2,p_amp, ncol = 2, nrow = 2)  # auto-adjusts layout
plots[[f_idx]] = grid_plot
}
filename = "test.gif"
path_out = file.path(path_figures, filename)
create_gif_from_plots(plots, path_out, 800, 600, 100, fps = 2)
t_grad_ind = which.min(abs(time - T_grad))
phase_diff = numeric(0)
amp_freq = numeric(0)
plots = list()
for (f_idx in 1:length(delta_f)) {
#  for (f_idx in 1:10) {
# Integrate to get the instantaneous phase
phase = 2*cumsum(freq_xt[f_idx,] * dt)
# The difference while gradient turned on
phase_diff[f_idx] = 2*(freq_x[f_idx]-freq_0)*T_grad
time_diff = time_max/(n_turns*2)*phase_diff[f_idx]
#time_diff = period/(2)*phase_diff[f_idx]
if (delta_f[f_idx]<0) {
time_peak_plot = time_peak_base_1
time_peak = time_peak_base_1-time_diff
} else
{
time_peak = time_peak_base-time_diff
time_peak_plot = time_peak_base
}
# Signal
signal = cos(pi*phase)
#The first plot: frequency over time
df = data.frame(x = time, y = freq_xt[f_idx,]-freq_0)
p_freq = ggplot(df, aes(x, y)) +
geom_line() +
theme_minimal() +
labs(x = "Time [s]", y = expression(Delta*"f [Hz]"))+
geom_vline(xintercept = T_grad,color = "red",linetype = "dashed" )+
ylim(-delta_f_max, delta_f_max)
#The second plot: signal over time
df = data.frame(x = time, y = signal)
p_signal2 = p_signal +
geom_line(data = df, aes(x, y), color = "pink") +
geom_vline(xintercept = time_peak,color = "pink",linetype = "dashed")+
#geom_vline(xintercept = time_peak_plot,color = "grey",linetype = "dashed" )+
annotate(
"segment",
x = time_peak, xend = time_peak_plot,
y = 0.5, yend = 0.5,
color = "green",
arrow = arrow(ends = "both", length = unit(0.2, "cm"))
)
#The third plot: delta phi over delta freq
df = data.frame(x = delta_f[1:f_idx], y = phase_diff )
p_phase = ggplot(df, aes(x, y)) +
geom_line(color = "green") +
theme_minimal() +
labs(x = expression(Delta*"f [Hz]"), y = expression(Delta*phi~"["*pi*"]"))+
xlim(delta_f[1],delta_f_max)+
ylim(2*delta_f_min*T_grad, 2*delta_f_max*T_grad)
#The forth plot: Amplitude over delta freq
amp_freq[f_idx] = signal[t_grad_ind]
df = data.frame(x = delta_f[1:f_idx], y = amp_freq )
p_amp = ggplot(df, aes(x, y)) +
geom_line() +
theme_minimal() +
labs(x = expression(Delta*"f [Hz]"), y = "Amplitude at time = T")+
xlim(delta_f[1],delta_f_max)+
ylim(-1, 1)
grid_plot = wrap_plots(p_freq,p_phase,p_signal2,p_amp, ncol = 2, nrow = 2)  # auto-adjusts layout
plots[[f_idx]] = grid_plot
}
filename = "phase_encoding_epic_demo.gif"
path_out = file.path(path_figures, filename)
create_gif_from_plots(plots, path_out, 800, 600, 100, fps = 2)
plots = plots[seq(1, length(plots), by = 4)]
filename = "phase_encoding_epic_demo.gif"
path_out = file.path(path_figures, filename)
create_gif_from_plots(plots, path_out, 800, 600, 100, fps = 2)
plots = plots[seq(1, length(plots), by = 2)]
filename = "phase_encoding_epic_demo.gif"
path_out = file.path(path_figures, filename)
create_gif_from_plots(plots, path_out, 800, 600, 100, fps = 2)
phase_diff = numeric(0)
amp_freq = numeric(0)
plots = list()
for (f_idx in 1:length(delta_f)) {
#  for (f_idx in 1:10) {
# Integrate to get the instantaneous phase
phase = 2*cumsum(freq_xt[f_idx,] * dt)
# The difference while gradient turned on
phase_diff[f_idx] = 2*(freq_x[f_idx]-freq_0)*T_grad
time_diff = time_max/(n_turns*2)*phase_diff[f_idx]
#time_diff = period/(2)*phase_diff[f_idx]
if (delta_f[f_idx]<0) {
time_peak_plot = time_peak_base_1
time_peak = time_peak_base_1-time_diff
} else
{
time_peak = time_peak_base-time_diff
time_peak_plot = time_peak_base
}
# Signal
signal = cos(pi*phase)
#The first plot: frequency over time
df = data.frame(x = time, y = freq_xt[f_idx,]-freq_0)
p_freq = ggplot(df, aes(x, y)) +
geom_line() +
theme_minimal() +
labs(x = "Time [s]", y = expression(Delta*"f [Hz]"))+
geom_vline(xintercept = T_grad,color = "red",linetype = "dashed" )+
ylim(-delta_f_max, delta_f_max)
#The second plot: signal over time
df = data.frame(x = time, y = signal)
p_signal2 = p_signal +
geom_line(data = df, aes(x, y), color = "pink") +
geom_vline(xintercept = time_peak,color = "pink",linetype = "dashed")+
#geom_vline(xintercept = time_peak_plot,color = "grey",linetype = "dashed" )+
annotate(
"segment",
x = time_peak, xend = time_peak_plot,
y = 0.5, yend = 0.5,
color = "green",
arrow = arrow(ends = "both", length = unit(0.2, "cm"))
)
#The third plot: delta phi over delta freq
df = data.frame(x = delta_f[1:f_idx], y = phase_diff )
p_phase = ggplot(df, aes(x, y)) +
geom_line(color = "green") +
theme_minimal() +
labs(x = expression(Delta*"f [Hz]"), y = expression(Delta*phi~"["*pi*"]"))+
xlim(delta_f[1],delta_f_max)+
ylim(2*delta_f_min*T_grad, 2*delta_f_max*T_grad)
#The forth plot: Amplitude over delta freq
amp_freq[f_idx] = signal[t_grad_ind]
df = data.frame(x = delta_f[1:f_idx], y = amp_freq )
p_amp = ggplot(df, aes(x, y)) +
geom_line() +
theme_minimal() +
labs(x = expression(Delta*"f [Hz]"), y = "Amplitude at time = T")+
xlim(delta_f[1],delta_f_max)+
ylim(-1, 1)
grid_plot = wrap_plots(p_freq,p_phase,p_signal2,p_amp, ncol = 2, nrow = 2)  # auto-adjusts layout
plots[[f_idx]] = grid_plot
}
plots = plots[seq(1, length(plots), by = 2)]
filename = "phase_encoding_epic_demo.gif"
path_out = file.path(path_figures, filename)
create_gif_from_plots(plots, path_out, 800, 600, 100, fps = 2)
phase_diff = numeric(0)
amp_freq = numeric(0)
plots = list()
for (f_idx in 1:length(delta_f)) {
#  for (f_idx in 1:10) {
# Integrate to get the instantaneous phase
phase = 2*cumsum(freq_xt[f_idx,] * dt)
# The difference while gradient turned on
phase_diff[f_idx] = 2*(freq_x[f_idx]-freq_0)*T_grad
time_diff = time_max/(n_turns*2)*phase_diff[f_idx]
#time_diff = period/(2)*phase_diff[f_idx]
if (delta_f[f_idx]<0) {
time_peak_plot = time_peak_base_1
time_peak = time_peak_base_1-time_diff
} else
{
time_peak = time_peak_base-time_diff
time_peak_plot = time_peak_base
}
# Signal
signal = cos(pi*phase)
#The first plot: frequency over time
df = data.frame(x = time, y = freq_xt[f_idx,]-freq_0)
p_freq = ggplot(df, aes(x, y)) +
geom_line() +
theme_minimal() +
labs(x = "Time [s]", y = expression(Delta*"f [Hz]"))+
geom_vline(xintercept = T_grad,color = "red",linetype = "dashed" )+
ylim(-delta_f_max, delta_f_max)
#The second plot: signal over time
df = data.frame(x = time, y = signal)
p_signal2 = p_signal +
geom_line(data = df, aes(x, y), color = "pink") +
geom_vline(xintercept = time_peak,color = "pink",linetype = "dashed")+
#geom_vline(xintercept = time_peak_plot,color = "grey",linetype = "dashed" )+
annotate(
"segment",
x = time_peak, xend = time_peak_plot,
y = 0.5, yend = 0.5,
color = "green",
arrow = arrow(ends = "both", length = unit(0.2, "cm"))
)
#The third plot: delta phi over delta freq
df = data.frame(x = delta_f[1:f_idx], y = phase_diff )
p_phase = ggplot(df, aes(x, y)) +
geom_line(color = "green") +
theme_minimal() +
labs(x = expression(Delta*"f [Hz]"), y = expression(Delta*phi~"["*pi*"]"))+
xlim(delta_f[1],delta_f_max)+
ylim(2*delta_f_min*T_grad, 2*delta_f_max*T_grad)
#The forth plot: Amplitude over delta freq
amp_freq[f_idx] = signal[t_grad_ind]
df = data.frame(x = delta_f[1:f_idx], y = amp_freq )
p_amp = ggplot(df, aes(x, y)) +
geom_line() +
theme_minimal() +
labs(x = expression(Delta*"f [Hz]"), y = "Amplitude at time = T")+
xlim(delta_f[1],delta_f_max)+
ylim(-1, 1)
grid_plot = wrap_plots(p_freq,p_phase,p_signal2,p_amp, ncol = 2, nrow = 2)  # auto-adjusts layout
plots[[f_idx]] = grid_plot
}
#plots = plots[seq(1, length(plots), by = 2)]
filename = "phase_encoding_epic_demo_slow.gif"
path_out = file.path(path_figures, filename)
create_gif_from_plots(plots, path_out, 800, 600, 100, fps = 2)
