color = "green",
arrow = arrow(ends = "last", length = unit(0.2, "cm"))
)
#The third plot: delta phi over delta freq
df = data.frame(x = delta_f[1:f_idx], y = phase_diff )
p_phase = ggplot(df, aes(x, y)) +
geom_line(color = "green") +
theme_minimal() +
labs(x = expression(Delta*"f [Hz]"), y = expression(Delta*phi~"["*pi*"]"))+
xlim(delta_f[1],delta_f_max)+
ylim(2*delta_f_min*T_grad, 2*delta_f_max*T_grad)
#The forth plot: Amplitude over delta freq
amp_freq[f_idx] = signal[t_grad_ind]
df = data.frame(x = delta_f[1:f_idx], y = amp_freq )
p_amp = ggplot(df, aes(x, y)) +
geom_line() +
theme_minimal() +
labs(x = expression(Delta*"f [Hz]"), y = "Amplitude at time = T")+
xlim(delta_f[1],delta_f_max)+
ylim(-1, 1)
grid_plot = wrap_plots(p_freq,p_phase,p_signal2,p_amp, ncol = 2, nrow = 2)  # auto-adjusts layout
plots[[f_idx]] = grid_plot
}
# gradient
delta_f_min = -freq_0
delta_f_max = freq_0
delta_f = seq(delta_f_min,delta_f_max,length.out = n_samples)
freq_x = freq_0 + delta_f
# We turn off the gradient after some time (e.g. 1 period)
T_grad = (1/freq_0)
freq_xt = matrix(rep(freq_x, times = n_samples), nrow = length(freq_x))
freq_xt[, time > T_grad] = freq_0
dt = t_max/(n_samples-1)
# Third peak
time_peak_base = 2*period
#Second peak
time_peak_base_1 = period
signal_base = cos(2*pi*freq_0*time)
df = data.frame(x=time,y=signal_base)
p_signal = ggplot(df, aes(x, y)) +
geom_line() +
theme_minimal() +
labs(x = "Time [s]", y = "Signal")+
geom_vline(xintercept = T_grad,color = "red",linetype = "dashed" )+
ylim(-1, 1)
t_grad_ind = which.min(abs(time - T_grad))
phase_diff = numeric(0)
amp_freq = numeric(0)
plots = list()
for (f_idx in 1:length(delta_f)) {
# Integrate to get the instantaneous phase
phase = 2*cumsum(freq_xt[f_idx,] * dt)
# The difference while gradient turned on
phase_diff[f_idx] = 2*(freq_x[f_idx]-freq_0)*T_grad
time_diff = t_max/(n_turns*2)*phase_diff[f_idx]
if (delta_f[f_idx]<0) {
time_peak_plot = time_peak_base_1
time_peak = time_peak_base_1-time_diff
arrow_end = "first"
} else
{
time_peak = time_peak_base-time_diff
time_peak_plot = time_peak_base
arrow_end = "last"
}
# Signal
signal = cos(pi*phase)
#The first plot: frequency over time
df = data.frame(x = time, y = freq_xt[f_idx,]-freq_0)
p_freq = ggplot(df, aes(x, y)) +
geom_line() +
theme_minimal() +
labs(x = "Time [s]", y = expression(Delta*"f [Hz]"))+
geom_vline(xintercept = T_grad,color = "red",linetype = "dashed" )+
ylim(-delta_f_max, delta_f_max)
#The second plot: signal over time
df = data.frame(x = time, y = signal)
p_signal2 = p_signal +
geom_line(data = df, aes(x, y), color = "pink") +
geom_vline(xintercept = time_peak,color = "pink",linetype = "dashed")+
annotate(
"segment",
x = time_peak, xend = time_peak_plot,
y = 0.5, yend = 0.5,
color = "green",
arrow = arrow(ends = "last", length = unit(0.2, "cm"))
)
#The third plot: delta phi over delta freq
df = data.frame(x = delta_f[1:f_idx], y = phase_diff )
p_phase = ggplot(df, aes(x, y)) +
geom_line(color = "green") +
theme_minimal() +
labs(x = expression(Delta*"f [Hz]"), y = expression(Delta*phi~"["*pi*"]"))+
xlim(delta_f[1],delta_f_max)+
ylim(2*delta_f_min*T_grad, 2*delta_f_max*T_grad)
#The forth plot: Amplitude over delta freq
amp_freq[f_idx] = signal[t_grad_ind]
df = data.frame(x = delta_f[1:f_idx], y = amp_freq )
p_amp = ggplot(df, aes(x, y)) +
geom_line() +
theme_minimal() +
labs(x = expression(Delta*"f [Hz]"), y = "Amplitude at time = T")+
xlim(delta_f[1],delta_f_max)+
ylim(-1, 1)
grid_plot = wrap_plots(p_freq,p_phase,p_signal2,p_amp, ncol = 2, nrow = 2)  # auto-adjusts layout
plots[[f_idx]] = grid_plot
}
plots = plots[seq(1, length(plots), by = 10)]
filename = "phase_encoding_epic_demo_test.gif"
path_out = file.path(path_figures, filename)
create_gif_from_plots(plots, path_out, 800, 600, 100, fps = 1)
source('functions/plotting_functions.R')
path_out
phase_diff = numeric(0)
amp_freq = numeric(0)
plots = list()
for (f_idx in 1:length(delta_f)) {
# Integrate to get the instantaneous phase
phase = 2*cumsum(freq_xt[f_idx,] * dt)
# The difference while gradient turned on
phase_diff[f_idx] = 2*(freq_x[f_idx]-freq_0)*T_grad
time_diff = t_max/(n_turns*2)*phase_diff[f_idx]
if (delta_f[f_idx]<0) {
time_peak_plot = time_peak_base_1
time_peak = time_peak_base_1-time_diff
arrow_end = "first"
} else
{
time_peak = time_peak_base-time_diff
time_peak_plot = time_peak_base
arrow_end = "last"
}
# Signal
signal = cos(pi*phase)
#The first plot: frequency over time
df = data.frame(x = time, y = freq_xt[f_idx,]-freq_0)
p_freq = ggplot(df, aes(x, y)) +
geom_line() +
theme_minimal() +
labs(x = "Time [s]", y = expression(Delta*"f [Hz]"))+
geom_vline(xintercept = T_grad,color = "red",linetype = "dashed" )+
ylim(-delta_f_max, delta_f_max)
#The second plot: signal over time
df = data.frame(x = time, y = signal)
p_signal2 = p_signal +
geom_line(data = df, aes(x, y), color = "pink") +
geom_vline(xintercept = time_peak,color = "pink",linetype = "dashed")+
annotate(
"segment",
x = time_peak, xend = time_peak_plot,
y = 0.5, yend = 0.5,
color = "green",
arrow = arrow(ends = "last", length = unit(0.2, "cm"))
)
#The third plot: delta phi over delta freq
df = data.frame(x = delta_f[1:f_idx], y = phase_diff )
p_phase = ggplot(df, aes(x, y)) +
geom_line(color = "green") +
theme_minimal() +
labs(x = expression(Delta*"f [Hz]"), y = expression(Delta*phi~"["*pi*"]"))+
xlim(delta_f[1],delta_f_max)+
ylim(2*delta_f_min*T_grad, 2*delta_f_max*T_grad)
#The forth plot: Amplitude over delta freq
amp_freq[f_idx] = signal[t_grad_ind]
df = data.frame(x = delta_f[1:f_idx], y = amp_freq )
p_amp = ggplot(df, aes(x, y)) +
geom_line() +
theme_minimal() +
labs(x = expression(Delta*"f [Hz]"), y = "Amplitude at time = T")+
xlim(delta_f[1],delta_f_max)+
ylim(-1, 1)
grid_plot = wrap_plots(p_freq,p_phase,p_signal2,p_amp, ncol = 2, nrow = 2)  # auto-adjusts layout
plots[[f_idx]] = grid_plot + theme(
plot.background  = element_rect(fill = "transparent", colour = NA),
panel.background = element_rect(fill = "transparent", colour = NA)
)
}
plots = plots[seq(1, length(plots), by = 10)]
filename = "phase_encoding_epic_demo_test.gif"
path_out = file.path(path_figures, filename)
create_gif_from_plots(plots, path_out, 800, 600, 100, fps = 1)
phase_diff = numeric(0)
amp_freq = numeric(0)
plots = list()
for (f_idx in 1:length(delta_f)) {
# Integrate to get the instantaneous phase
phase = 2*cumsum(freq_xt[f_idx,] * dt)
# The difference while gradient turned on
phase_diff[f_idx] = 2*(freq_x[f_idx]-freq_0)*T_grad
time_diff = t_max/(n_turns*2)*phase_diff[f_idx]
if (delta_f[f_idx]<0) {
time_peak_plot = time_peak_base_1
time_peak = time_peak_base_1-time_diff
arrow_end = "first"
} else
{
time_peak = time_peak_base-time_diff
time_peak_plot = time_peak_base
arrow_end = "last"
}
# Signal
signal = cos(pi*phase)
#The first plot: frequency over time
df = data.frame(x = time, y = freq_xt[f_idx,]-freq_0)
p_freq = ggplot(df, aes(x, y)) +
geom_line() +
theme_minimal() +
labs(x = "Time [s]", y = expression(Delta*"f [Hz]"))+
geom_vline(xintercept = T_grad,color = "red",linetype = "dashed" )+
ylim(-delta_f_max, delta_f_max)
#The second plot: signal over time
df = data.frame(x = time, y = signal)
p_signal2 = p_signal +
geom_line(data = df, aes(x, y), color = "pink") +
geom_vline(xintercept = time_peak,color = "pink",linetype = "dashed")+
annotate(
"segment",
x = time_peak, xend = time_peak_plot,
y = 0.5, yend = 0.5,
color = "green",
arrow = arrow(ends = "last", length = unit(0.2, "cm"))
)
#The third plot: delta phi over delta freq
df = data.frame(x = delta_f[1:f_idx], y = phase_diff )
p_phase = ggplot(df, aes(x, y)) +
geom_line(color = "green") +
theme_minimal() +
labs(x = expression(Delta*"f [Hz]"), y = expression(Delta*phi~"["*pi*"]"))+
xlim(delta_f[1],delta_f_max)+
ylim(2*delta_f_min*T_grad, 2*delta_f_max*T_grad)
#The forth plot: Amplitude over delta freq
amp_freq[f_idx] = signal[t_grad_ind]
df = data.frame(x = delta_f[1:f_idx], y = amp_freq )
p_amp = ggplot(df, aes(x, y)) +
geom_line() +
theme_minimal() +
labs(x = expression(Delta*"f [Hz]"), y = "Amplitude at time = T")+
xlim(delta_f[1],delta_f_max)+
ylim(-1, 1)
grid_plot = wrap_plots(p_freq,p_phase,p_signal2,p_amp, ncol = 2, nrow = 2)  # auto-adjusts layout
plots[[f_idx]] = grid_plot & theme(
plot.background  = element_rect(fill = "transparent", colour = NA),
panel.background = element_rect(fill = "transparent", colour = NA)
)
}
plots = plots[seq(1, length(plots), by = 10)]
filename = "phase_encoding_epic_demo_test.gif"
path_out = file.path(path_figures, filename)
create_gif_from_plots(plots, path_out, 800, 600, 100, fps = 1)
create_gif_from_plots(plots, path_out, 1200, 900, 150, fps = 1)
create_gif_from_plots(plots, path_out, 1200, 900, 200, fps = 1)
seq(1, length(plots), by = 4)
phase_diff = numeric(0)
amp_freq = numeric(0)
plots = list()
for (f_idx in 1:length(delta_f)) {
# Integrate to get the instantaneous phase
phase = 2*cumsum(freq_xt[f_idx,] * dt)
# The difference while gradient turned on
phase_diff[f_idx] = 2*(freq_x[f_idx]-freq_0)*T_grad
time_diff = t_max/(n_turns*2)*phase_diff[f_idx]
if (delta_f[f_idx]<0) {
time_peak_plot = time_peak_base_1
time_peak = time_peak_base_1-time_diff
arrow_end = "first"
} else
{
time_peak = time_peak_base-time_diff
time_peak_plot = time_peak_base
arrow_end = "last"
}
# Signal
signal = cos(pi*phase)
#The first plot: frequency over time
df = data.frame(x = time, y = freq_xt[f_idx,]-freq_0)
p_freq = ggplot(df, aes(x, y)) +
geom_line() +
theme_minimal() +
labs(x = "Time [s]", y = expression(Delta*"f [Hz]"))+
geom_vline(xintercept = T_grad,color = "red",linetype = "dashed" )+
ylim(-delta_f_max, delta_f_max)
#The second plot: signal over time
df = data.frame(x = time, y = signal)
p_signal2 = p_signal +
geom_line(data = df, aes(x, y), color = "pink") +
geom_vline(xintercept = time_peak,color = "pink",linetype = "dashed")+
annotate(
"segment",
x = time_peak, xend = time_peak_plot,
y = 0.5, yend = 0.5,
color = "green",
arrow = arrow(ends = "last", length = unit(0.2, "cm"))
)
#The third plot: delta phi over delta freq
df = data.frame(x = delta_f[1:f_idx], y = phase_diff )
p_phase = ggplot(df, aes(x, y)) +
geom_line(color = "green") +
theme_minimal() +
labs(x = expression(Delta*"f [Hz]"), y = expression(Delta*phi~"["*pi*"]"))+
xlim(delta_f[1],delta_f_max)+
ylim(2*delta_f_min*T_grad, 2*delta_f_max*T_grad)
#The forth plot: Amplitude over delta freq
amp_freq[f_idx] = signal[t_grad_ind]
df = data.frame(x = delta_f[1:f_idx], y = amp_freq )
p_amp = ggplot(df, aes(x, y)) +
geom_line() +
theme_minimal() +
labs(x = expression(Delta*"f [Hz]"), y = "Signal at time = T")+
xlim(delta_f[1],delta_f_max)+
ylim(-1, 1)
grid_plot = wrap_plots(p_freq,p_phase,p_signal2,p_amp, ncol = 2, nrow = 2)  # auto-adjusts layout
plots[[f_idx]] = grid_plot & theme(
plot.background  = element_rect(fill = "transparent", colour = NA),
panel.background = element_rect(fill = "transparent", colour = NA)
)
}
length(plots)
seq(1, length(plots), by = 4)
seq(1, length(plots), by = 5)
seq(1, length(plots), by = 3)
plots_selected = plots[seq(1, length(plots), by = 5)]
filename = "phase_encoding_epic_demo_test.gif"
path_out = file.path(path_figures, filename)
create_gif_from_plots(plots_selected, path_out, 1200, 900, 150, fps = 1)
mat_plot
amp_sum
# Convert to data frame for ggplot
df = expand.grid(x = 1:ncol(mat_plot), y = 1:nrow(mat_plot))
df$val = as.vector(mat_plot)
# Plot in ggplot
p_object = ggplot(df, aes(x = x, y = y, fill = val)) +
geom_raster(interpolate = FALSE) +
scale_fill_gradient(low = "black", high = "white") +
coord_fixed(expand = FALSE) +
theme_void() +
theme(legend.position = "none")
amp_sum = sum(mat)
# Time interval
delta_f_max = 1
period = 1/delta_f_max
n_turns = 2
n_samples_per_turn = 100
n_samples = n_samples_per_turn*n_turns
T_grad = 1/2*period*n_turns
delta_f = seq(-delta_f_max,delta_f_max,length.out = n_samples)
n_samples = length(delta_f)
delta_f_FOV = (n-1)*delta_f
# How frequency varies in space (1 to n px) depending on gradient strength
freq_x = t(sapply(delta_f_FOV, function(f) seq(0, f, length.out = n)))
kspace = numeric(0)
plots = list()
for (f_idx in 1:n_samples){
#Phase
signals_px = numeric(n_object_px^2)
for (px_idx in 1:n_object_px^2) {
row_idx = object_idx[px_idx, 1]
col_idx = object_idx[px_idx, 2]
amp = mat[row_idx, col_idx]
phase = 2* freq_x[f_idx,col_idx]*T_grad
signals_px[px_idx] = amp*cos(pi*phase)
}
kspace[f_idx] = sum(signals_px)
df = data.frame(x = delta_f[1:f_idx], y = kspace )
p_amp = ggplot(df, aes(x, y)) +
geom_line() +
theme_minimal() +
labs(x = expression(Delta*"f [Hz]"), y = "Signal at time = T")+
xlim(delta_f[1],delta_f_max)+
coord_fixed(ratio = 1/12) +
ylim(-amp_sum/2, amp_sum)
# Plot the gradient
df = data.frame(
x = c(0, n, n),
y = c(0, 0, delta_f_FOV[f_idx])
)
p_gradient = ggplot(df, aes(x, y)) +
geom_polygon(fill = "blue") +
coord_fixed(ratio = 1/2.5) +
theme_void()+
ylim(min(delta_f_FOV),max(delta_f_FOV))+
ggtitle("Phase gradient")+
theme(plot.title = element_text(size = 10))
plots[[f_idx]] = wrap_plots(p_object,p_amp,p_gradient,ncol = 2,nrow = 2)
}
freq_x
f_idx
col_idx
n
# Plot in ggplot
p_object = ggplot(df, aes(x = x, y = y, fill = val)) +
geom_raster(interpolate = FALSE) +
scale_fill_gradient(low = "black", high = "white") +
coord_fixed(expand = FALSE) +
theme_void() +
theme(legend.position = "none")
amp_sum = sum(mat)
n = 5
# Time interval
delta_f_max = 1
period = 1/delta_f_max
n_turns = 2
n_samples_per_turn = 100
n_samples = n_samples_per_turn*n_turns
T_grad = 1/2*period*n_turns
delta_f = seq(-delta_f_max,delta_f_max,length.out = n_samples)
n_samples = length(delta_f)
delta_f_FOV = (n-1)*delta_f
# How frequency varies in space (1 to n px) depending on gradient strength
freq_x = t(sapply(delta_f_FOV, function(f) seq(0, f, length.out = n)))
kspace = numeric(0)
plots = list()
for (f_idx in 1:n_samples){
#Phase
signals_px = numeric(n_object_px^2)
for (px_idx in 1:n_object_px^2) {
row_idx = object_idx[px_idx, 1]
col_idx = object_idx[px_idx, 2]
amp = mat[row_idx, col_idx]
phase = 2* freq_x[f_idx,col_idx]*T_grad
signals_px[px_idx] = amp*cos(pi*phase)
}
kspace[f_idx] = sum(signals_px)
df = data.frame(x = delta_f[1:f_idx], y = kspace )
p_amp = ggplot(df, aes(x, y)) +
geom_line() +
theme_minimal() +
labs(x = expression(Delta*"f [Hz]"), y = "Signal at time = T")+
xlim(delta_f[1],delta_f_max)+
coord_fixed(ratio = 1/12) +
ylim(-amp_sum/2, amp_sum)
# Plot the gradient
df = data.frame(
x = c(0, n, n),
y = c(0, 0, delta_f_FOV[f_idx])
)
p_gradient = ggplot(df, aes(x, y)) +
geom_polygon(fill = "blue") +
coord_fixed(ratio = 1/2.5) +
theme_void()+
ylim(min(delta_f_FOV),max(delta_f_FOV))+
ggtitle("Phase gradient")+
theme(plot.title = element_text(size = 10))
plots[[f_idx]] = wrap_plots(p_object,p_amp,p_gradient,ncol = 2,nrow = 2)
}
plots_gif = plots[seq(1, length(plots), by = 10)]
filename = "phase_encoding_object_demo_test.gif"
path_out = file.path(path_figures, filename)
create_gif_from_plots(plots_gif, path_out, 800, 400, 100, fps = 1)
kspace = numeric(0)
plots = list()
for (f_idx in 1:n_samples){
#Phase
signals_px = numeric(n_object_px^2)
for (px_idx in 1:n_object_px^2) {
row_idx = object_idx[px_idx, 1]
col_idx = object_idx[px_idx, 2]
amp = mat[row_idx, col_idx]
phase = 2* freq_x[f_idx,col_idx]*T_grad
signals_px[px_idx] = amp*cos(pi*phase)
}
kspace[f_idx] = sum(signals_px)
df = data.frame(x = delta_f[1:f_idx], y = kspace )
p_amp = ggplot(df, aes(x, y)) +
geom_line() +
theme_minimal() +
labs(x = expression(Delta*"f [Hz]"), y = "Signal at time = T")+
xlim(delta_f[1],delta_f_max)+
coord_fixed(ratio = 1/12) +
ylim(-amp_sum/2, amp_sum)
# Plot the gradient
df = data.frame(
x = c(0, n, n),
y = c(0, 0, delta_f_FOV[f_idx])
)
p_gradient = ggplot(df, aes(x, y)) +
geom_polygon(fill = "blue") +
coord_fixed(ratio = 1/2.5) +
theme_void()+
ylim(min(delta_f_FOV),max(delta_f_FOV))+
ggtitle("Phase gradient")+
theme(plot.title = element_text(size = 10))
plots[[f_idx]] = wrap_plots(p_object,p_amp,p_gradient,ncol = 2,nrow = 2) & theme(
plot.background  = element_rect(fill = "transparent", colour = NA),
panel.background = element_rect(fill = "transparent", colour = NA)
)
}
plots_gif = plots[seq(1, length(plots), by = 10)]
filename = "phase_encoding_object_demo_test.gif"
path_out = file.path(path_figures, filename)
create_gif_from_plots(plots_gif, path_out, 800, 400, 100, fps = 1)
seq(1, length(plots), by = 15)
seq(1, length(plots), by = 20)
seq(1, length(plots), by = 30)
plots_gif = plots[seq(1, length(plots), by = 30)]
filename = "phase_encoding_object_demo_test.gif"
path_out = file.path(path_figures, filename)
create_gif_from_plots(plots_gif, path_out, 800, 400, 200, fps = 1)
plots_gif = plots[seq(1, length(plots), by = 30)]
filename = "phase_encoding_object_demo_test.gif"
path_out = file.path(path_figures, filename)
create_gif_from_plots(plots_gif, path_out, 1200, 600, 150, fps = 1)
1200*1.5
600*1.5
150*1.5
plots_gif = plots[seq(1, length(plots), by = 30)]
filename = "phase_encoding_object_demo_test.gif"
path_out = file.path(path_figures, filename)
create_gif_from_plots(plots_gif, path_out, 1800, 900, 225, fps = 1)
plots_gif = plots[seq(1, length(plots), by = 10)]
filename = "phase_encoding_object_demo_test.gif"
path_out = file.path(path_figures, filename)
create_gif_from_plots(plots_gif, path_out, 1800, 900, 225, fps = 1)
